import { isPlainObject } from "@vuepress/shared";
import { injectLocalizedDate, keys, startsWith } from "vuepress-shared/node";
import { convertFrontmatter } from "../compact/index.js";
import { checkFrontmatter } from "../frontmatter/check.js";
export const injectPageInfo = (page) => {
    const { filePathRelative } = page;
    const frontmatter = page.frontmatter;
    const isArticle = 
    // declaring this is an article
    frontmatter.article ||
        // generated from markdown files
        Boolean(frontmatter.article !== false && filePathRelative);
    const isSlide = frontmatter.layout === "Slide";
    // save page type to routeMeta
    page.routeMeta["y" /* ArticleInfoType.type */] = frontmatter.home
        ? "h" /* PageType.home */
        : isSlide
            ? "s" /* PageType.slide */
            : isArticle
                ? "a" /* PageType.article */
                : "p" /* PageType.page */;
    // save relative file path into page data to generate edit link
    page.data.filePathRelative = filePathRelative;
    page.routeMeta["t" /* ArticleInfoType.title */] = page.title;
    if ("icon" in frontmatter)
        page.routeMeta["i" /* ArticleInfoType.icon */] = frontmatter.icon;
    // catalog related
    if (isPlainObject(frontmatter.dir)) {
        if ("order" in frontmatter.dir)
            page.routeMeta["O" /* ArticleInfoType.order */] = frontmatter.dir.order;
        if ("index" in frontmatter.dir &&
            frontmatter.dir.index === false)
            page.routeMeta["I" /* ArticleInfoType.index */] = 0;
    }
    else {
        if ("order" in frontmatter)
            page.routeMeta["O" /* ArticleInfoType.order */] = frontmatter.order;
        if ("index" in frontmatter && frontmatter.index === false)
            page.routeMeta["I" /* ArticleInfoType.index */] = 0;
    }
    // resolve shortTitle
    if ("shortTitle" in frontmatter)
        page.routeMeta["s" /* ArticleInfoType.shortTitle */] = frontmatter.shortTitle;
};
export const extendsPagePlugin = (themeData, legacy = true) => {
    const encryptedPaths = keys(themeData.encrypt.config || {});
    const isPageEncrypted = ({ path }) => encryptedPaths.some((key) => startsWith(decodeURI(path), key));
    return {
        name: "vuepress-theme-hope-extends-page",
        extendsPage: (page, app) => {
            if (legacy)
                page.frontmatter = convertFrontmatter(page.frontmatter, page.filePathRelative || "");
            const isEncrypted = isPageEncrypted(page);
            // encrypt page shall not have seo
            if (isEncrypted)
                page.frontmatter["seo"] = false;
            checkFrontmatter(page, app.env.isDebug);
            injectPageInfo(page);
            injectLocalizedDate(page);
        },
    };
};
export const useExtendsPagePlugin = (app, themeData, legacy = true) => {
    app.use(extendsPagePlugin(themeData, legacy));
};
//# sourceMappingURL=pageConverter.js.map